---
description: 
globs: 
alwaysApply: true
---
# State Management Guide

This project uses several approaches for state management:

## Local Component State

- Use React's `useState` and `useReducer` for component-level state
- Prefer controlled components for form inputs

## React Hooks

- Custom hooks in the [hooks/](mdc:hooks) directory encapsulate reusable logic
- Hooks follow the `useXxx` naming convention

## Server State

- Server Components can directly fetch data
- Use React Query or SWR for client component data fetching

## Example Custom Hook

```tsx
"use client";

import { useState, useEffect } from "react";

export function useLocalStorage<T>(key: string, initialValue: T) {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === "undefined") {
      return initialValue;
    }
    
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(error);
      return initialValue;
    }
  });
  
  useEffect(() => {
    if (typeof window !== "undefined") {
      window.localStorage.setItem(key, JSON.stringify(storedValue));
    }
  }, [key, storedValue]);
  
  return [storedValue, setStoredValue] as const;
}
```

