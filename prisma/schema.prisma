generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}


/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model excercise {
  id                 BigInt             @id @default(autoincrement())
  created_by         String?            @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  body_region        String
  primary_bodypart   String
  secondary_bodypart String?
  category           String?  
  level              String?
  is_default         Boolean            @default(false)
  excercise_preset   excercise_preset[]
  sets               sets[]
  user_preferences   user_preferences[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model excercise_preset {
  id                BigInt            @id @default(autoincrement())
  template_id       BigInt
  excercise_id      BigInt?
  order             Int?              @db.SmallInt
  excercise         excercise?        @relation(fields: [excercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workout_templates workout_templates @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model sets {
  id         BigInt     @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  exercise   BigInt?
  reps       Int?       @db.SmallInt
  weight     Float?     @db.Real
  intensity  String?    @db.VarChar
  notes      String?
  user_id    String?    @db.Uuid
  excercise  excercise? @relation(fields: [exercise], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_preferences {
  id               BigInt     @id @default(autoincrement())
  created_at       DateTime   @default(now()) @db.Timestamptz(6)
  user_id          String?    @db.Uuid
  exercise_id      BigInt?
  preference_level Int?       @db.SmallInt
  notes            String?
  excercise        excercise? @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_profiles {
  id             BigInt   @id @default(autoincrement())
  user_id        String?  @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  name           String?
  age            Int?     @db.SmallInt
  weight         Int?     @db.SmallInt
  fitness_level  String?
  goal           String?
  weight_history Json?
  gender         String?
  bio            String?
  height         String?

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workout_templates {
  id               BigInt             @id @default(autoincrement())
  name             String?
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  user_id          String?            @db.Uuid
  excercise_preset excercise_preset[]

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
